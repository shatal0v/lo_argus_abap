*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 01.12.2020 at 00:12:16
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZVHR_ARGUS_DATES................................*
FORM GET_DATA_ZVHR_ARGUS_DATES.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTHR_ARGUS_DATES WHERE
(VIM_WHERETAB) .
    CLEAR ZVHR_ARGUS_DATES .
ZVHR_ARGUS_DATES-MANDT =
ZTHR_ARGUS_DATES-MANDT .
ZVHR_ARGUS_DATES-CATEGORY =
ZTHR_ARGUS_DATES-CATEGORY .
ZVHR_ARGUS_DATES-JYEAR =
ZTHR_ARGUS_DATES-JYEAR .
ZVHR_ARGUS_DATES-ENDDA =
ZTHR_ARGUS_DATES-ENDDA .
<VIM_TOTAL_STRUC> = ZVHR_ARGUS_DATES.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVHR_ARGUS_DATES .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVHR_ARGUS_DATES.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVHR_ARGUS_DATES-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTHR_ARGUS_DATES WHERE
  CATEGORY = ZVHR_ARGUS_DATES-CATEGORY AND
  JYEAR = ZVHR_ARGUS_DATES-JYEAR .
    IF SY-SUBRC = 0.
    DELETE ZTHR_ARGUS_DATES .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTHR_ARGUS_DATES WHERE
  CATEGORY = ZVHR_ARGUS_DATES-CATEGORY AND
  JYEAR = ZVHR_ARGUS_DATES-JYEAR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTHR_ARGUS_DATES.
    ENDIF.
ZTHR_ARGUS_DATES-MANDT =
ZVHR_ARGUS_DATES-MANDT .
ZTHR_ARGUS_DATES-CATEGORY =
ZVHR_ARGUS_DATES-CATEGORY .
ZTHR_ARGUS_DATES-JYEAR =
ZVHR_ARGUS_DATES-JYEAR .
ZTHR_ARGUS_DATES-ENDDA =
ZVHR_ARGUS_DATES-ENDDA .
    IF SY-SUBRC = 0.
    UPDATE ZTHR_ARGUS_DATES .
    ELSE.
    INSERT ZTHR_ARGUS_DATES .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVHR_ARGUS_DATES-UPD_FLAG,
STATUS_ZVHR_ARGUS_DATES-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVHR_ARGUS_DATES.
  SELECT SINGLE * FROM ZTHR_ARGUS_DATES WHERE
CATEGORY = ZVHR_ARGUS_DATES-CATEGORY AND
JYEAR = ZVHR_ARGUS_DATES-JYEAR .
ZVHR_ARGUS_DATES-MANDT =
ZTHR_ARGUS_DATES-MANDT .
ZVHR_ARGUS_DATES-CATEGORY =
ZTHR_ARGUS_DATES-CATEGORY .
ZVHR_ARGUS_DATES-JYEAR =
ZTHR_ARGUS_DATES-JYEAR .
ZVHR_ARGUS_DATES-ENDDA =
ZTHR_ARGUS_DATES-ENDDA .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVHR_ARGUS_DATES USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVHR_ARGUS_DATES-CATEGORY TO
ZTHR_ARGUS_DATES-CATEGORY .
MOVE ZVHR_ARGUS_DATES-JYEAR TO
ZTHR_ARGUS_DATES-JYEAR .
MOVE ZVHR_ARGUS_DATES-MANDT TO
ZTHR_ARGUS_DATES-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTHR_ARGUS_DATES'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTHR_ARGUS_DATES TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTHR_ARGUS_DATES'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
